unit Test_FIToolkit.Utils;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework,
  FIToolkit.Utils;

type
  // Test methods for class TIff

  TestFIToolkitUtils = class(TTestCase)
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestIff;
  end;

implementation

procedure TestFIToolkitUtils.SetUp;
begin
  //
end;

procedure TestFIToolkitUtils.TearDown;
begin
  //
end;

procedure TestFIToolkitUtils.TestIff;
  type
    TTestEnum = (teFirst, teSecond, teThird);
  var
    iReturnValue, iTruePart, iFalsePart : Integer;
    sReturnValue, sTruePart, sFalsePart : String;
    eReturnValue, eTruePart, eFalsePart : TTestEnum;
begin
  iTruePart  := 1;
  iFalsePart := 0;
  sTruePart  := '1';
  sFalsePart := '0';
  eTruePart  := teFirst;
  eFalsePart := teThird;

  iReturnValue := Iff.Get<Integer>(True, iTruePart, iFalsePart);
  CheckEquals(iTruePart, iReturnValue, 'Integer::TruePart');
  iReturnValue := Iff.Get<Integer>(False, iTruePart, iFalsePart);
  CheckEquals(iFalsePart, iReturnValue, 'Integer::FalsePart');

  sReturnValue := Iff.Get<String>(True, sTruePart, sFalsePart);
  CheckEquals(sTruePart, sReturnValue, 'String::TruePart');
  sReturnValue := Iff.Get<String>(False, sTruePart, sFalsePart);
  CheckEquals(sFalsePart, sReturnValue, 'String::FalsePart');

  eReturnValue := Iff.Get<TTestEnum>(True, eTruePart, eFalsePart);
  CheckTrue(eReturnValue = eTruePart, 'TTestEnum::TruePart');
  eReturnValue := Iff.Get<TTestEnum>(False, eTruePart, eFalsePart);
  CheckTrue(eReturnValue = eFalsePart, 'TTestEnum::FalsePart');
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestFIToolkitUtils.Suite);
end.

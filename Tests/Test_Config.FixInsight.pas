unit Test_Config.FixInsight;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, System.SysUtils, System.Types, Config.FixInsight;

type
  // Test methods for class TFixInsightOptions

  TestTFixInsightOptions = class(TTestCase)
  strict private
    FFixInsightOptions: TFixInsightOptions;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestToString;
  end;

implementation

uses
  Config.Exceptions, Config.Consts;

procedure TestTFixInsightOptions.SetUp;
begin
  FFixInsightOptions := TFixInsightOptions.Create;
end;

procedure TestTFixInsightOptions.TearDown;
begin
  FFixInsightOptions.Free;
  FFixInsightOptions := nil;
end;

procedure TestTFixInsightOptions.TestToString;
const
  STR_DEFINE1 = 'DEFINE1';
  STR_DEFINE2 = 'DEFINE2';
  STR_NON_EXISTENT_FILE = 'Y:\~non_existent!@#$%^&*(:)?.folder\~non_existent!@#$%^&*(:)?.file';
  STR_EXPECTED_RESULT =
    STR_FIPARAM_PROJECT + STR_NON_EXISTENT_FILE + ' ' +
    STR_FIPARAM_DEFINES + STR_DEFINE1 + STR_FIPARAM_VALUES_DELIM + STR_DEFINE2 + ' ' +
    STR_FIPARAM_OUTPUT + STR_NON_EXISTENT_FILE + ' ' +
    STR_FIPARAM_SETTINGS + STR_NON_EXISTENT_FILE + ' ' +
    STR_FIPARAM_XML;
var
  Defines : TStringDynArray;
  ReturnValue : String;
  bWasException : Boolean;
begin
  SetLength(Defines, 2);
  Defines[0] := STR_DEFINE1;
  Defines[1] := STR_DEFINE2;

  with FFixInsightOptions do
  begin
    Validate := False;
    ProjectFileName := STR_NON_EXISTENT_FILE;
    CompilerDefines := Defines;
    OutputFileName := STR_NON_EXISTENT_FILE;
    SettingsFileName := STR_NON_EXISTENT_FILE;
    OutputFormat := fiofXML;
  end;

  { Check string format }

  ReturnValue := FFixInsightOptions.ToString;
  CheckTrue(ReturnValue = STR_EXPECTED_RESULT, 'ReturnValue = STR_EXPECTED_RESULT');

  { Check validation - common }

  bWasException := False;
  FFixInsightOptions.Validate := True;
  try
    ReturnValue := FFixInsightOptions.ToString;
  except
    on E:Exception do
    begin
      bWasException := True;
      CheckTrue(E.InheritsFrom(EFixInsightOptionsException), 'E.InheritsFrom(EFixInsightOptionsException)');
    end;
  end;
  CheckTrue(bWasException, 'ToString::bWasException');

  { Check validation - valid params }

  with FFixInsightOptions do
  begin
    Validate := True;
    SettingsFileName := EmptyStr;
    ProjectFileName := ParamStr(0);
    OutputFileName := ParamStr(0);
    SettingsFileName := ParamStr(0);
  end;

  { Check validation - invalid project file name }

  bWasException := False;
  try
    FFixInsightOptions.ProjectFileName := STR_NON_EXISTENT_FILE;
  except
    on E:Exception do
    begin
      bWasException := True;
      CheckTrue(E.InheritsFrom(EFIOProjectFileNotFound), 'E.InheritsFrom(EFIOProjectFileNotFound)');
    end;
  end;
  CheckTrue(bWasException, 'ProjectFileName::bWasException');

  { Check validation - empty output file name }

  bWasException := False;
  try
    FFixInsightOptions.OutputFileName := EmptyStr;
  except
    on E:Exception do
    begin
      bWasException := True;
      CheckTrue(E.InheritsFrom(EFIOEmptyOutputFileName), 'E.InheritsFrom(EFIOEmptyOutputFileName)');
    end;
  end;
  CheckTrue(bWasException, 'OutputFileName::bWasException');

  { Check validation - invalid output file name }

  bWasException := False;
  try
    FFixInsightOptions.OutputFileName := STR_NON_EXISTENT_FILE;
  except
    on E:Exception do
    begin
      bWasException := True;
      CheckTrue(E.InheritsFrom(EFIOOutputDirectoryNotFound), 'E.InheritsFrom(EFIOOutputDirectoryNotFound)');
    end;
  end;
  CheckTrue(bWasException, 'OutputFileName::bWasException');

  { Check validation - invalid settings file name }

  bWasException := False;
  try
    FFixInsightOptions.SettingsFileName := STR_NON_EXISTENT_FILE;
  except
    on E:Exception do
    begin
      bWasException := True;
      CheckTrue(E.InheritsFrom(EFIOSettingsFileNotFound), 'E.InheritsFrom(EFIOSettingsFileNotFound)');
    end;
  end;
  CheckTrue(bWasException, 'SettingsFileName::bWasException');
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTFixInsightOptions.Suite);
end.

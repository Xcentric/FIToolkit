unit Test_FIToolkit.ProjectGroupParser.Parser;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework,
  FIToolkit.ProjectGroupParser.Parser;

type
  // Test methods for class TProjectGroupParser

  TestTProjectGroupParser = class(TGenericTestCase)
  strict private
    FProjectGroupParser : TProjectGroupParser;
  private
    function  FindProjectGroup : String;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestGetIncludedProjectsFiles;
  end;

implementation

uses
  TestUtils,
  System.SysUtils, System.Types, System.IOUtils;

{ TestTProjectGroupParser }

function TestTProjectGroupParser.FindProjectGroup : String;
begin
  Result := TDirectory.GetFiles(GetProjectGroupDir, '*.groupproj', TSearchOption.soAllDirectories)[0];
end;

procedure TestTProjectGroupParser.SetUp;
begin
  FProjectGroupParser := TProjectGroupParser.Create(FindProjectGroup);
end;

procedure TestTProjectGroupParser.TearDown;
begin
  FreeAndNil(FProjectGroupParser);
end;

procedure TestTProjectGroupParser.TestGetIncludedProjectsFiles;
var
  sRootDir, S : String;
  ReturnValue : TStringDynArray;
begin
  sRootDir := GetProjectGroupDir;

  ReturnValue := FProjectGroupParser.GetIncludedProjectsFiles;

  CheckTrue(Length(ReturnValue) > 0, 'CheckTrue::(Length(ReturnValue) > 0)');
  for S in ReturnValue do
  begin
    CheckTrue(S.StartsWith(sRootDir, True), 'CheckTrue::ReturnValue[i].StartsWith(sRootDir)<%s>', [S]);
    CheckEquals('.dpr', TPath.GetExtension(S), 'TPath.GetExtension(ReturnValue[i]) = ".dpr"');
  end;
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTProjectGroupParser.Suite);

end.

unit Test_FIToolkit.Base.FiniteStateMachine.FSM;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework,
  FIToolkit.Base.FiniteStateMachine.FSM, FIToolkit.Base.Exceptions;

type
  // Test methods for class TFiniteStateMachine

  TestTFiniteStateMachine = class(TTestCase)
  private
    type
      TStateType = (stStart, stState1, stState2, stState3, stFinish);
      TCommandType = (ctBegin, ctSwitchState_1to2, ctSwitchState_2to3, ctEnd);
      ETestException = class (ECustomException);

      TOnEnterStateMethod = TOnEnterStateMethod<TStateType, TCommandType>;
      TOnEnterStateProc   = TOnEnterStateProc<TStateType, TCommandType>;
      TOnExitStateMethod  = TOnExitStateMethod<TStateType, TCommandType>;
      TOnExitStateProc    = TOnExitStateProc<TStateType, TCommandType>;

      IFiniteStateMachine = IFiniteStateMachine<TStateType, TCommandType, ETestException>;
      TFiniteStateMachine = class (TFiniteStateMachine<TStateType, TCommandType, ETestException>);
  strict private
    FFiniteStateMachine: IFiniteStateMachine;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestAddTransition;
    procedure TestAddTransition1;
    procedure TestAddTransition2;
    procedure TestExecute;
    procedure TestGetReachableState;
    procedure TestGetReachableState1;
    procedure TestHasTransition;
    procedure TestHasTransition1;
    procedure TestRemoveTransition;
  end;

implementation

procedure TestTFiniteStateMachine.SetUp;
begin
  FFiniteStateMachine := TFiniteStateMachine.Create;
end;

procedure TestTFiniteStateMachine.TearDown;
begin
  FFiniteStateMachine := nil;
end;

procedure TestTFiniteStateMachine.TestAddTransition;
var
  ReturnValue: IFiniteStateMachine;
  OnCommand: TCommandType;
  ToState: TStateType;
  FromState: TStateType;
begin
  // TODO: Setup method call parameters
  ReturnValue := FFiniteStateMachine.AddTransition(FromState, ToState, OnCommand);
  // TODO: Validate method results
end;

procedure TestTFiniteStateMachine.TestAddTransition1;
var
  ReturnValue: IFiniteStateMachine;
  OnExit: TOnExitStateMethod;
  OnEnter: TOnEnterStateMethod;
  OnCommand: TCommandType;
  ToState: TStateType;
  FromState: TStateType;
begin
  // TODO: Setup method call parameters
  ReturnValue := FFiniteStateMachine.AddTransition(FromState, ToState, OnCommand,
      OnEnter, OnExit);
  // TODO: Validate method results
end;

procedure TestTFiniteStateMachine.TestAddTransition2;
var
  ReturnValue: IFiniteStateMachine;
  OnExit: TOnExitStateProc;
  OnEnter: TOnEnterStateProc;
  OnCommand: TCommandType;
  ToState: TStateType;
  FromState: TStateType;
begin
  // TODO: Setup method call parameters
  ReturnValue := FFiniteStateMachine.AddTransition(FromState, ToState, OnCommand,
      OnEnter, OnExit);
  // TODO: Validate method results
end;

procedure TestTFiniteStateMachine.TestExecute;
var
  ReturnValue: IFiniteStateMachine;
  Command: TCommandType;
begin
  // TODO: Setup method call parameters
  ReturnValue := FFiniteStateMachine.Execute(Command);
  // TODO: Validate method results
end;

procedure TestTFiniteStateMachine.TestGetReachableState;
var
  ReturnValue: TStateType;
  OnCommand: TCommandType;
  FromState: TStateType;
begin
  // TODO: Setup method call parameters
  ReturnValue := FFiniteStateMachine.GetReachableState(FromState, OnCommand);
  // TODO: Validate method results
end;

procedure TestTFiniteStateMachine.TestGetReachableState1;
var
  ReturnValue: TStateType;
  OnCommand: TCommandType;
begin
  // TODO: Setup method call parameters
  ReturnValue := FFiniteStateMachine.GetReachableState(OnCommand);
  // TODO: Validate method results
end;

procedure TestTFiniteStateMachine.TestHasTransition;
var
  ReturnValue: Boolean;
  OnCommand: TCommandType;
  FromState: TStateType;
begin
  // TODO: Setup method call parameters
  ReturnValue := FFiniteStateMachine.HasTransition(FromState, OnCommand);
  // TODO: Validate method results
end;

procedure TestTFiniteStateMachine.TestHasTransition1;
var
  ReturnValue: Boolean;
  OnCommand: TCommandType;
begin
  // TODO: Setup method call parameters
  ReturnValue := FFiniteStateMachine.HasTransition(OnCommand);
  // TODO: Validate method results
end;

procedure TestTFiniteStateMachine.TestRemoveTransition;
var
  ReturnValue: IFiniteStateMachine;
  OnCommand: TCommandType;
  FromState: TStateType;
begin
  // TODO: Setup method call parameters
  ReturnValue := FFiniteStateMachine.RemoveTransition(FromState, OnCommand);
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTFiniteStateMachine.Suite);
end.


unit Test_FIToolkit.Config.Storage;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework,
  FIToolkit.Config.Storage;

type
  // Test methods for class TConfigFile

  TestTConfigFile = class(TTestCase)
  private
    const
      STR_INI_SECTION = 'TestSection';
      STR_INI_PARAM = 'TestParam';
      INT_INI_VALUE = 777;
  strict private
    FConfigFile : TConfigFile;
  private
    function  CreateConfigFile(CurrentTest : Pointer) : TConfigFile;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestAfterConstruction;
    procedure TestCreate;
    procedure TestLoad;
    procedure TestSave;
  end;

implementation

uses
  System.SysUtils, System.IniFiles,
  TestUtils;

function TestTConfigFile.CreateConfigFile(CurrentTest : Pointer) : TConfigFile;
var
  sFileName : TFileName;
begin
  Result := nil;
  sFileName := GetTestIniFileName;

  if CurrentTest = @TestTConfigFile.TestSave then
    Result := TConfigFile.Create(sFileName, True)
  else
  if (CurrentTest = @TestTConfigFile.TestAfterConstruction) or (CurrentTest = @TestTConfigFile.TestLoad) then
  begin
    with TMemIniFile.Create(sFileName, TEncoding.UTF8) do
      try
        WriteInteger(STR_INI_SECTION, STR_INI_PARAM, INT_INI_VALUE);
        UpdateFile;
      finally
        Free;
      end;

    Result := TConfigFile.Create(sFileName, False);
  end;
end;

procedure TestTConfigFile.SetUp;
begin
  FConfigFile := CreateConfigFile(GetCurrTestMethodAddr);
end;

procedure TestTConfigFile.TearDown;
var
  S : String;
begin
  if Assigned(FConfigFile) then
  begin
    S := FConfigFile.FileName;
    FreeAndNil(FConfigFile);
    DeleteFile(S);
  end;
end;

procedure TestTConfigFile.TestAfterConstruction;
begin
  FConfigFile.AfterConstruction;

  CheckTrue(FConfigFile.Config.SectionExists(STR_INI_SECTION), 'CheckTrue::SectionExists');
end;

procedure TestTConfigFile.TestCreate;
var
  sFileName : TFileName;
  Cfg : TConfigFile;
begin
  sFileName := GetTestIniFileName;

  { File not exists / Can't create }

  Cfg := nil;
  try
    DeleteFile(sFileName);
    CheckException(
      procedure
      begin
        Cfg := TConfigFile.Create(sFileName, False);
      end,
      nil,
      'CheckException::nil<NotExists,NotWritable>'
    );
    CheckFalse(FileExists(sFileName), 'CheckFalse::FilexExists<NotExists,NotWritable>');
    CheckFalse(Cfg.HasFile, 'CheckFalse::HasFile<NotExists,NotWritable>');
    CheckTrue(String.IsNullOrEmpty(Cfg.FileName), 'CheckTrue::Cfg.FileName.IsEmpty');
  finally
    if Assigned(Cfg) then
      Cfg.Free;
  end;

  { File not exists / Can create }

  Cfg := nil;
  try
    DeleteFile(sFileName);
    CheckException(
      procedure
      begin
        Cfg := TConfigFile.Create(sFileName, True);
      end,
      nil,
      'CheckException::nil<NotExists,Writable>'
    );
    CheckTrue(FileExists(sFileName), 'CheckTrue::FileExists<NotExists,Writable>');
    CheckTrue(Cfg.HasFile, 'CheckTrue::HasFile<NotExists,Writable>');
    CheckEquals(sFileName, Cfg.FileName, '(Cfg.FileName = sFileName)::<NotExists,Writable>');
  finally
    if Assigned(Cfg) then
      Cfg.Free;
  end;

  { File exists / Not writable }

  Cfg := nil;
  try
    Assert(FileExists(sFileName));
    CheckException(
      procedure
      begin
        Cfg := TConfigFile.Create(sFileName, False);
      end,
      nil,
      'CheckException::nil<Exists,NotWritable>'
    );
    CheckTrue(Cfg.HasFile, 'CheckTrue::HasFile<Exists,NotWritable>');
    CheckEquals(sFileName, Cfg.FileName, '(Cfg.FileName = sFileName)::<Exists,NotWritable>');
  finally
    if Assigned(Cfg) then
      Cfg.Free;
  end;

  { File exists / Writable }

  Cfg := nil;
  try
    Assert(FileExists(sFileName));
    CheckException(
      procedure
      begin
        Cfg := TConfigFile.Create(sFileName, True);
      end,
      nil,
      'CheckException::nil<Exists,Writable>'
    );
    CheckTrue(Cfg.HasFile, 'CheckTrue::HasFile<Exists,Writable>');
    CheckEquals(sFileName, Cfg.FileName, '(Cfg.FileName = sFileName)::<Exists,Writable>');
  finally
    if Assigned(Cfg) then
      Cfg.Free;
  end;
end;

procedure TestTConfigFile.TestLoad;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FConfigFile.Load;

  CheckTrue(ReturnValue, 'CheckTrue::ReturnValue');
  CheckEquals(INT_INI_VALUE, FConfigFile.Config.ReadInteger(STR_INI_SECTION, STR_INI_PARAM, 0),
    'Config.ReadInteger = INT_INI_VALUE');
end;

procedure TestTConfigFile.TestSave;
var
  ReturnValue: Boolean;
begin
  FConfigFile.Config.WriteInteger(STR_INI_SECTION, STR_INI_PARAM, INT_INI_VALUE);
  ReturnValue := FConfigFile.Save;

  CheckTrue(ReturnValue, 'CheckTrue::ReturnValue');
  with TMemIniFile.Create(CloneFile(FConfigFile.FileName), TEncoding.UTF8) do
    try
      CheckEquals(INT_INI_VALUE, ReadInteger(STR_INI_SECTION, STR_INI_PARAM, 0),
        'TMemIniFile.ReadInteger = INT_INI_VALUE');
    finally
      Free;
    end;
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTConfigFile.Suite);
end.

unit Test_Config.Data;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Config.FixInsight, Config.Data, System.SysUtils;

type
  // Test methods for class TConfigData

  TestTConfigData = class(TTestCase)
  strict private
    FConfigData: TConfigData;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestInvalidData;
    procedure TestValidData;
  end;

implementation

uses
  TestConsts, Config.Exceptions;

procedure TestTConfigData.SetUp;
begin
  FConfigData := TConfigData.Create;
end;

procedure TestTConfigData.TearDown;
begin
  FConfigData.Free;
  FConfigData := nil;
end;

procedure TestTConfigData.TestInvalidData;
  var
    bWasException : Boolean;
begin
  FConfigData.Validate := True;

  { Check validation - invalid FixInsight executable path }

  bWasException := False;
  try
    FConfigData.FixInsightExe := STR_NON_EXISTENT_FILE;
  except
    on E:Exception do
    begin
      bWasException := True;
      CheckTrue(E.InheritsFrom(ECDFixInsightExeNotFound), 'E.InheritsFrom(ECDFixInsightExeNotFound)');
    end;
  end;
  CheckTrue(bWasException, 'FixInsightExe::bWasException');

  { Check validation - invalid input file name }

  bWasException := False;
  try
    FConfigData.InputFileName := STR_NON_EXISTENT_FILE;
  except
    on E:Exception do
    begin
      bWasException := True;
      CheckTrue(E.InheritsFrom(ECDInputFileNotFound), 'E.InheritsFrom(ECDInputFileNotFound)');
    end;
  end;
  CheckTrue(bWasException, 'InputFileName::bWasException');

  { Check validation - invalid output file name }

  bWasException := False;
  try
    FConfigData.OutputDirectory := STR_NON_EXISTENT_DIR;
  except
    on E:Exception do
    begin
      bWasException := True;
      CheckTrue(E.InheritsFrom(ECDOutputDirectoryNotFound), 'E.InheritsFrom(ECDOutputDirectoryNotFound)');
    end;
  end;
  CheckTrue(bWasException, 'OutputDirectory::bWasException');

  { Check validation - invalid output directory }

  bWasException := False;
  try
    FConfigData.OutputFileName := STR_INVALID_FILENAME;
  except
    on E:Exception do
    begin
      bWasException := True;
      CheckTrue(E.InheritsFrom(ECDInvalidOutputFileName), 'E.InheritsFrom(ECDInvalidOutputFileName)');
    end;
  end;
  CheckTrue(bWasException, 'OutputFileName::bWasException');

  { Check validation - invalid temp directory }

  bWasException := False;
  try
    FConfigData.TempDirectory := STR_NON_EXISTENT_DIR;
  except
    on E:Exception do
    begin
      bWasException := True;
      CheckTrue(E.InheritsFrom(ECDTempDirectoryNotFound), 'E.InheritsFrom(ECDTempDirectoryNotFound)');
    end;
  end;
  CheckTrue(bWasException, 'TempDirectory::bWasException');
end;

procedure TestTConfigData.TestValidData;
  var
    bWasException : Boolean;
begin
  bWasException := False;
  try
    with FConfigData do
    begin
      Validate := True;
      FixInsightExe := ParamStr(0);
      InputFileName := ParamStr(0);
      OutputDirectory := ExtractFileDir(ParamStr(0));
      OutputFileName := ExtractFileName(ParamStr(0));
      TempDirectory := ExtractFileDir(ParamStr(0));
    end;
  except
    bWasException := True;
  end;
  CheckFalse(bWasException, 'TestValidData::bWasException');
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTConfigData.Suite);
end.

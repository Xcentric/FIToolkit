unit Test_FIToolkit.Reports.Parser.Types;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework,
  FIToolkit.Reports.Parser.Types;

type

  TestTFixInsightMessage = class (TGenericTestCase)
    published
      procedure TestCreate;
  end;

implementation

uses
  System.SysUtils;

{ TestTFixInsightMessage }

procedure TestTFixInsightMessage.TestCreate;
const
  MSGID_WARNING = 'W123';
  MSGID_OPTIMIZATION = 'O123';
  MSGID_CODING_CONVENTION = 'C123';
  MSGID_TRIAL = 'Tria';
var
  FIM : TFixInsightMessage;
begin
  FIM := TFixInsightMessage.Create(String.Empty, 0, 0, String.Empty, String.Empty);
  CheckEquals<TFixInsightMessageType>(fimtUnknown, FIM.MsgType, 'MsgType = fimtUnknown');

  FIM := TFixInsightMessage.Create(String.Empty, 0, 0, MSGID_WARNING, String.Empty);
  CheckEquals<TFixInsightMessageType>(fimtWarning, FIM.MsgType, 'MsgType = fimtWarning');

  FIM := TFixInsightMessage.Create(String.Empty, 0, 0, MSGID_OPTIMIZATION, String.Empty);
  CheckEquals<TFixInsightMessageType>(fimtOptimization, FIM.MsgType, 'MsgType = fimtOptimization');

  FIM := TFixInsightMessage.Create(String.Empty, 0, 0, MSGID_CODING_CONVENTION, String.Empty);
  CheckEquals<TFixInsightMessageType>(fimtCodingConvention, FIM.MsgType, 'MsgType = fimtCodingConvention');

  FIM := TFixInsightMessage.Create(String.Empty, 0, 0, MSGID_TRIAL, String.Empty);
  CheckEquals<TFixInsightMessageType>(fimtTrial, FIM.MsgType, 'MsgType = fimtTrial');
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTFixInsightMessage.Suite);

end.

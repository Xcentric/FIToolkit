unit Test_UTF8Sources;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework;

type

  TestUTF8Sources = class (TGenericTestCase)
  private
    const
      STR_ROOT_DIR                  = '..\..\..\';
      STR_PROJECT_SOURCES_DIR       = 'Source\';
      STR_PROJECT_TESTS_SOURCES_DIR = 'Tests\';
  private
    function  GetProjectSourcesDir : String;
    function  GetProjectTestsSourcesDir : String;
    function  GetRootDir : String;
    function  IsUTF8TextFile(const FileName : String) : Boolean;
  published
    procedure TestFIToolkitSources;
    procedure TestFIToolkitTestsSources;
  end;

implementation

uses
  TestUtils,
  System.SysUtils, System.IOUtils, System.Classes;

{ TestUTF8Sources }

function TestUTF8Sources.GetProjectSourcesDir : String;
begin
  Result := IncludeTrailingPathDelimiter(GetRootDir + STR_PROJECT_SOURCES_DIR);
end;

function TestUTF8Sources.GetProjectTestsSourcesDir : String;
begin
  Result := IncludeTrailingPathDelimiter(GetRootDir + STR_PROJECT_TESTS_SOURCES_DIR);
end;

function TestUTF8Sources.GetRootDir : String;
var
  iLevels, i : Integer;
  arrTokens : TArray<String>;
begin
  iLevels := 0;
  arrTokens := String(STR_ROOT_DIR).Split([TPath.DirectorySeparatorChar], ExcludeEmpty);

  for i := High(arrTokens) downto 0 do
    if arrTokens[i] = '..' then
      Inc(iLevels)
    else
      Break;

  arrTokens := TestDataDir.Split([TPath.DirectorySeparatorChar], ExcludeEmpty);
  Result := String
    .Join(TPath.DirectorySeparatorChar, arrTokens, 0, Length(arrTokens) - iLevels) + TPath.DirectorySeparatorChar;
end;

function TestUTF8Sources.IsUTF8TextFile(const FileName : String) : Boolean;
const
  BOM : TBytes = [$EF, $BB, $BF];
var
  Buffer : TBytes;
  FS : TFileStream;
  i : Integer;
begin
  Result := False;

  if TFile.Exists(FileName) then
  begin
    SetLength(Buffer, Length(BOM));

    FS := TFile.Open(FileName, TFileMode.fmOpen, TFileAccess.faRead, TFileShare.fsReadWrite);
    try
      if FS.Read(Buffer, Length(Buffer)) = Length(BOM) then
      begin
        Result := True;

        for i := 0 to High(Buffer) do
          if Buffer[i] <> BOM[i] then
            Exit(False);
      end;
    finally
      FS.Free;
    end;
  end;
end;

procedure TestUTF8Sources.TestFIToolkitSources;
var
  S : String;
begin
  for S in TDirectory.GetFiles(GetProjectSourcesDir, '*.pas', TSearchOption.soAllDirectories) do
    CheckTrue(IsUTF8TextFile(S), 'CheckTrue::<%s>', [S]);
end;

procedure TestUTF8Sources.TestFIToolkitTestsSources;
var
  S : String;
begin
  for S in TDirectory.GetFiles(GetProjectTestsSourcesDir, '*.pas', TSearchOption.soAllDirectories) do
    CheckTrue(IsUTF8TextFile(S), 'CheckTrue::<%s>', [S]);
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestUTF8Sources.Suite);

end.

unit Test_FIToolkit.Config.Data;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework,
  FIToolkit.Config.Data;

type
  // Test methods for class TConfigData

  TestTConfigData = class(TTestCase)
  strict private
    FConfigData: TConfigData;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestEmptyData;
    procedure TestInvalidData;
    procedure TestValidData;
  end;

implementation

uses
  System.SysUtils,
  TestUtils, TestConsts,
  FIToolkit.Config.Exceptions;

procedure TestTConfigData.SetUp;
begin
  FConfigData := TConfigData.Create;
end;

procedure TestTConfigData.TearDown;
begin
  FreeAndNil(FConfigData);
end;

procedure TestTConfigData.TestEmptyData;
begin
  FConfigData.Validate := True;

  { Check validation - empty FixInsight executable path }

  CheckException(
    procedure
    begin
      FConfigData.FixInsightExe := String.Empty;
    end,
    ECDFixInsightExeNotFound,
    'FixInsightExe'
  );

  { Check validation - empty input file name }

  CheckException(
    procedure
    begin
      FConfigData.InputFileName := String.Empty;
    end,
    ECDInputFileNotFound,
    'InputFileName'
  );

  { Check validation - empty output directory }

  CheckException(
    procedure
    begin
      FConfigData.OutputDirectory := String.Empty;
    end,
    ECDOutputDirectoryNotFound,
    'OutputDirectory'
  );

  { Check validation - empty output file name }

  CheckException(
    procedure
    begin
      FConfigData.OutputFileName := String.Empty;
    end,
    ECDInvalidOutputFileName,
    'OutputFileName'
  );

  { Check validation - empty temp directory }

  CheckException(
    procedure
    begin
      FConfigData.TempDirectory := String.Empty;
    end,
    ECDTempDirectoryNotFound,
    'TempDirectory'
  );
end;

procedure TestTConfigData.TestInvalidData;
begin
  FConfigData.Validate := True;

  { Check validation - invalid FixInsight executable path }

  CheckException(
    procedure
    begin
      FConfigData.FixInsightExe := STR_NON_EXISTENT_FILE;
    end,
    ECDFixInsightExeNotFound,
    'FixInsightExe'
  );

  { Check validation - invalid input file name }

  CheckException(
    procedure
    begin
      FConfigData.InputFileName := STR_NON_EXISTENT_FILE;
    end,
    ECDInputFileNotFound,
    'InputFileName'
  );

  { Check validation - invalid output directory }

  CheckException(
    procedure
    begin
      FConfigData.OutputDirectory := STR_NON_EXISTENT_DIR;
    end,
    ECDOutputDirectoryNotFound,
    'OutputDirectory'
  );

  { Check validation - invalid output file name }

  CheckException(
    procedure
    begin
      FConfigData.OutputFileName := STR_INVALID_FILENAME;
    end,
    ECDInvalidOutputFileName,
    'OutputFileName'
  );

  { Check validation - invalid temp directory }

  CheckException(
    procedure
    begin
      FConfigData.TempDirectory := STR_NON_EXISTENT_DIR;
    end,
    ECDTempDirectoryNotFound,
    'TempDirectory'
  );
end;

procedure TestTConfigData.TestValidData;
begin
  CheckException(
    procedure
    begin
      with FConfigData do
      begin
        Validate := True;
        FixInsightExe := ParamStr(0);
        InputFileName := ParamStr(0);
        OutputDirectory := ExtractFileDir(ParamStr(0));
        OutputFileName := ExtractFileName(ParamStr(0));
        TempDirectory := ExtractFileDir(ParamStr(0));
      end;
    end,
    nil
  );
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTConfigData.Suite);
end.

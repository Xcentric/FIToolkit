unit Test_FIToolkit.Reports.Builder.HTML;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework,
  FIToolkit.Reports.Builder.HTML,
  TestTypes;

type

  // Test methods for class THTMLReportBuilder

  TestTHTMLReportBuilder = class (TGenericTestCase)
  private
    const
      START_TIME : TDateTimeRec = (
        Year : 2015; Month : 06; Day : 29;
        Hour : 18; Minute : 24; Second : 44;
      );
      FINISH_TIME : TDateTimeRec = (
        Year : 2016; Month : 10; Day : 31;
        Hour : 20; Minute : 35; Second : 54;
      );
  strict private
    FHTMLReportBuilder : THTMLReportBuilder;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestAddFooter;
    procedure TestAddHeader;
    procedure TestAddTotalSummary;
    procedure TestAppendRecord;
    procedure TestBeginProjectSection;
    procedure TestBeginReport;
    procedure TestEndProjectSection;
    procedure TestEndReport;
    procedure TestSetTemplate;
  end;

  // Test methods for class THTMLReportTemplate

  TestTHTMLReportTemplate = class (TGenericTestCase)
  strict private
    FHTMLReportTemplate : THTMLReportTemplate;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestGetFooterElement;
    procedure TestGetHeaderElement;
    procedure TestGetMessageElement;
    procedure TestGetProjectMessagesElement;
    procedure TestGetProjectSectionElement;
    procedure TestGetProjectSummaryElement;
    procedure TestGetProjectSummaryItemElement;
    procedure TestGetTotalSummaryElement;
    procedure TestGetTotalSummaryItemElement;
  end;

  // Test methods for class THTMLReportCustomTemplate

  TestTHTMLReportCustomTemplate = class (TGenericTestCase)
  published
    procedure TestCreate;
  end;

  // Test methods for class THTMLReportDefaultTemplate

  TestTHTMLReportDefaultTemplate = class (TGenericTestCase)
  published
    procedure TestCreate;
  end;

implementation

uses
  System.SysUtils,
  FIToolkit.Reports.Builder.Intf, FIToolkit.Reports.Builder.Types;

{ TestTHTMLReportBuilder }

procedure TestTHTMLReportBuilder.SetUp;
begin
  FHTMLReportBuilder := THTMLReportBuilder.Create;
end;

procedure TestTHTMLReportBuilder.TearDown;
begin
  FHTMLReportBuilder.Free;
  FHTMLReportBuilder := nil;
end;

procedure TestTHTMLReportBuilder.TestAddFooter;
var
  FinishTime : TDateTime;
begin
  FinishTime := FINISH_TIME;
  FHTMLReportBuilder.AddFooter(FinishTime);
  // TODO: Validate method results
end;

procedure TestTHTMLReportBuilder.TestAddHeader;
var
  StartTime : TDateTime;
  Title : String;
begin
  StartTime := START_TIME;
  FHTMLReportBuilder.AddHeader(Title, StartTime);
  // TODO: Validate method results
end;

procedure TestTHTMLReportBuilder.TestAddTotalSummary;
var
  Items : array of TSummaryItem;
begin
  // TODO: Setup method call parameters
  FHTMLReportBuilder.AddTotalSummary(Items);
  // TODO: Validate method results
end;

procedure TestTHTMLReportBuilder.TestAppendRecord;
var
  Item : TReportRecord;
begin
  // TODO: Setup method call parameters
  FHTMLReportBuilder.AppendRecord(Item);
  // TODO: Validate method results
end;

procedure TestTHTMLReportBuilder.TestBeginProjectSection;
var
  ProjectSummary : array of TSummaryItem;
  Title : String;
begin
  // TODO: Setup method call parameters
  FHTMLReportBuilder.BeginProjectSection(Title, ProjectSummary);
  // TODO: Validate method results
end;

procedure TestTHTMLReportBuilder.TestBeginReport;
begin
  FHTMLReportBuilder.BeginReport;
  // TODO: Validate method results
end;

procedure TestTHTMLReportBuilder.TestEndProjectSection;
begin
  FHTMLReportBuilder.EndProjectSection;
  // TODO: Validate method results
end;

procedure TestTHTMLReportBuilder.TestEndReport;
begin
  FHTMLReportBuilder.EndReport;
  // TODO: Validate method results
end;

procedure TestTHTMLReportBuilder.TestSetTemplate;
var
  Template : ITextReportTemplate;
begin
  // TODO: Setup method call parameters
  FHTMLReportBuilder.SetTemplate(Template);
  // TODO: Validate method results
end;

{ TestTHTMLReportTemplate }

procedure TestTHTMLReportTemplate.SetUp;
begin
  FHTMLReportTemplate := THTMLReportTemplate.Create;
end;

procedure TestTHTMLReportTemplate.TearDown;
begin
  FHTMLReportTemplate.Free;
  FHTMLReportTemplate := nil;
end;

procedure TestTHTMLReportTemplate.TestGetFooterElement;
var
  ReturnValue : String;
begin
  ReturnValue := FHTMLReportTemplate.GetFooterElement;
  // TODO: Validate method results
end;

procedure TestTHTMLReportTemplate.TestGetHeaderElement;
var
  ReturnValue : String;
begin
  ReturnValue := FHTMLReportTemplate.GetHeaderElement;
  // TODO: Validate method results
end;

procedure TestTHTMLReportTemplate.TestGetMessageElement;
var
  ReturnValue : String;
begin
  ReturnValue := FHTMLReportTemplate.GetMessageElement;
  // TODO: Validate method results
end;

procedure TestTHTMLReportTemplate.TestGetProjectMessagesElement;
var
  ReturnValue : String;
begin
  ReturnValue := FHTMLReportTemplate.GetProjectMessagesElement;
  // TODO: Validate method results
end;

procedure TestTHTMLReportTemplate.TestGetProjectSectionElement;
var
  ReturnValue : String;
begin
  ReturnValue := FHTMLReportTemplate.GetProjectSectionElement;
  // TODO: Validate method results
end;

procedure TestTHTMLReportTemplate.TestGetProjectSummaryElement;
var
  ReturnValue : String;
begin
  ReturnValue := FHTMLReportTemplate.GetProjectSummaryElement;
  // TODO: Validate method results
end;

procedure TestTHTMLReportTemplate.TestGetProjectSummaryItemElement;
var
  ReturnValue : String;
begin
  ReturnValue := FHTMLReportTemplate.GetProjectSummaryItemElement;
  // TODO: Validate method results
end;

procedure TestTHTMLReportTemplate.TestGetTotalSummaryElement;
var
  ReturnValue : String;
begin
  ReturnValue := FHTMLReportTemplate.GetTotalSummaryElement;
  // TODO: Validate method results
end;

procedure TestTHTMLReportTemplate.TestGetTotalSummaryItemElement;
var
  ReturnValue : String;
begin
  ReturnValue := FHTMLReportTemplate.GetTotalSummaryItemElement;
  // TODO: Validate method results
end;

{ TestTHTMLReportCustomTemplate }

procedure TestTHTMLReportCustomTemplate.TestCreate;
begin
  //
end;

{ TestTHTMLReportDefaultTemplate }

procedure TestTHTMLReportDefaultTemplate.TestCreate;
begin
  //
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTHTMLReportBuilder.Suite);
  RegisterTest(TestTHTMLReportTemplate.Suite);
  RegisterTest(TestTHTMLReportCustomTemplate.Suite);
  RegisterTest(TestTHTMLReportDefaultTemplate.Suite);

end.

unit Test_FIToolkit.CommandLine.Options;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework,
  FIToolkit.CommandLine.Options, FIToolkit.CommandLine.Types;

type
  // Test methods for class TCLIOption

  TestTCLIOption = class (TTestCase)
  strict private
    FCLIOption : TCLIOption;
  private
    const
      STR_PREFIX = '/';
      STR_OPTION_NAME = 'ParamName';
      STR_DELIMITER = ':';
      STR_OPTION_VALUE = 'ParamValue';
      STR_OPTION_VALUE_WITH_SPACE = 'Param' + TCLIOptionString.CHR_SPACE + 'Value';

      STR_OPTION = STR_PREFIX + STR_OPTION_NAME + STR_DELIMITER + STR_OPTION_VALUE;
      STR_OPTION_WITH_SPACE = STR_PREFIX + STR_OPTION_NAME + STR_DELIMITER + STR_OPTION_VALUE_WITH_SPACE;
  published
    procedure TestCreateLong;
    procedure TestCreateShort;
    procedure TestHasDelimiter;
    procedure TestHasNonEmptyValue;
    procedure TestHasPrefix;
    procedure TestImplicitFromString;
    procedure TestImplicitToString;
    procedure TestToString;
    procedure TestValueContainsSpaces;
  end;

implementation

uses
  System.SysUtils,
  TestUtils,
  FIToolkit.CommandLine.Exceptions, FIToolkit.CommandLine.Consts;

procedure TestTCLIOption.TestCreateLong;
begin
  CheckException(
    procedure
    begin
      TCLIOption.Create(STR_OPTION, STR_PREFIX, STR_DELIMITER);
    end,
    nil,
    'Create::ValidParams'
  );

  CheckException(
    procedure
    begin
      TCLIOption.Create(String.Empty, STR_PREFIX, STR_DELIMITER);
    end,
    ECLIOptionIsEmpty,
    'Create::EmptyOption'
  );

  CheckException(
    procedure
    begin
      TCLIOption.Create(STR_PREFIX + STR_DELIMITER, STR_PREFIX, STR_DELIMITER);
    end,
    ECLIOptionHasNoName,
    'Create::OptionWithEmptyName'
  );
end;

procedure TestTCLIOption.TestCreateShort;
begin
  CheckException(
    procedure
    begin
      TCLIOption.Create(STR_OPTION_NAME);
    end,
    nil,
    'Create::ValidParams'
  );

  CheckException(
    procedure
    begin
      TCLIOption.Create(String.Empty);
    end,
    ECLIOptionIsEmpty,
    'Create::EmptyOption'
  );

  CheckException(
    procedure
    begin
      TCLIOption.Create(STR_CLI_OPTION_PREFIX + STR_CLI_OPTION_DELIMITER);
    end,
    ECLIOptionHasNoName,
    'Create::OptionWithEmptyName'
  );
end;

procedure TestTCLIOption.TestHasDelimiter;
begin
  CheckTrue(TCLIOption.Create(STR_OPTION, STR_PREFIX, STR_DELIMITER).HasDelimiter, 'Prefix → Delimiter');
  CheckFalse(TCLIOption.Create(STR_OPTION, STR_DELIMITER, STR_PREFIX).HasDelimiter, 'Delimiter → Prefix');
end;

procedure TestTCLIOption.TestHasNonEmptyValue;
begin
  CheckTrue(TCLIOption.Create(STR_OPTION, STR_PREFIX, STR_DELIMITER).HasNonEmptyValue, STR_OPTION);
  CheckFalse(TCLIOption.Create(STR_OPTION_NAME, STR_PREFIX, STR_DELIMITER).HasNonEmptyValue, STR_OPTION_NAME);
end;

procedure TestTCLIOption.TestHasPrefix;
begin
  CheckTrue(TCLIOption.Create(STR_OPTION, STR_PREFIX, STR_DELIMITER).HasPrefix, 'Prefix → Delimiter');
  CheckFalse(TCLIOption.Create(STR_OPTION, STR_DELIMITER, STR_PREFIX).HasPrefix, 'Delimiter → Prefix');
end;

procedure TestTCLIOption.TestImplicitFromString;
  var
    S : String;
begin
  S := STR_OPTION;
  FCLIOption := S;

  CheckEquals(STR_OPTION, FCLIOption.OptionString, 'FCLIOption.OptionString = STR_OPTION');
end;

procedure TestTCLIOption.TestImplicitToString;
  var
    S : String;
begin
  FCLIOption := TCLIOption.Create(STR_OPTION, STR_PREFIX, STR_DELIMITER);
  S := FCLIOption;

  CheckEquals(STR_OPTION, S, 'S = STR_OPTION');
end;

procedure TestTCLIOption.TestToString;
begin
  FCLIOption := TCLIOption.Create(STR_OPTION, STR_PREFIX, STR_DELIMITER);
  CheckEquals(STR_OPTION, FCLIOption.ToString, 'FCLIOption.ToString = STR_OPTION');

  FCLIOption := TCLIOption.Create(STR_OPTION_NAME, ' ', ' ');
  CheckEquals(STR_OPTION_NAME, FCLIOption.ToString, 'FCLIOption.ToString = STR_OPTION_NAME');

  FCLIOption := TCLIOption.Create(STR_OPTION_WITH_SPACE, STR_PREFIX, STR_DELIMITER);
  CheckTrue(
    String(FCLIOption.ToString).EndsWith(
      TCLIOptionString.CHR_QUOTE + STR_OPTION_VALUE_WITH_SPACE + TCLIOptionString.CHR_QUOTE),
    STR_OPTION_WITH_SPACE
  );
end;

procedure TestTCLIOption.TestValueContainsSpaces;
begin
  CheckFalse(TCLIOption.Create(STR_OPTION, STR_PREFIX, STR_DELIMITER).ValueContainsSpaces, STR_OPTION);
  CheckTrue(TCLIOption.Create(STR_OPTION_WITH_SPACE, STR_PREFIX, STR_DELIMITER).ValueContainsSpaces,
    QuotedStr(STR_OPTION_WITH_SPACE));
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTCLIOption.Suite);

end.
